name: Build and Deploy Web App

permissions:
  id-token: write  # Required for OIDC-based authentication
  contents: read   # Required for actions/checkout

# Reusable variables for common elements
env:
  AWS_REGION: 'us-east-1'
  AWS_ACCOUNT_ID: '339713122183'
  ROLE_TO_ASSUME: 'arn:aws:iam::339713122183:role/github-actions-admin-aws'
  ROLE_SESSION_NAME: 'GitHubActions'
  REPO_NAME: "${{ github.event.repository.name }}"
  ECR_REPO: "339713122183.dkr.ecr.us-east-1.amazonaws.com/${{ github.event.repository.name }}"
  ECS_CLUSTER: 'ecs-cluster'
  ECS_SERVICE: 'webapp_service'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test Golang Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3  # Sets up Node.js
        with:
          node-version: 20  # Use the latest Node.js version
      - name: Install dependencies
        run: npm ci  # Uses npm ci for a clean install of dependencies

      - name: Build Next.js project
        run: npm run build  # Builds the Next.js project

      - name: Run tests
        run: npm run test  # Runs the project's test suite

  prepare-ecr:
    name: Prepare ECR Repository
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          web-identity-token-file: ${{ github.token_path }}
      - name: Upsert ECR repository
        run: |
          aws ecr describe-repositories --repository-names ${{ env.REPO_NAME }} || aws ecr create-repository --repository-name ${{ env.REPO_NAME }}

  docker-build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: prepare-ecr
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          web-identity-token-file: ${{ github.token_path }}
      - name: Build and push Docker image
        run: |
          echo "Building Docker image REPO_NAME ${{ env.REPO_NAME }}"
          IMAGE_SHA_TAG="${{ env.REPO_NAME }}:${{ github.sha }}"  # Tag with commit SHA
          IMAGE_LATEST_TAG="${{ env.REPO_NAME }}:latest"  # Tag with "latest"
          # Authenticate with ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPO }}
          
          # Build the Docker image and tag with the unique SHA tag
          docker build -t ${{ IMAGE_SHA_TAG }} .
          
          # Tag the built image with the SHA in ECR
          docker tag ${{ IMAGE_SHA_TAG }} ${{ env.ECR_REPO }}:${{ github.sha }}
          
          # Tag the built image with "latest" in ECR
          docker tag ${{ IMAGE_SHA_TAG }} ${{ env.ECR_REPO }}:latest
          
          # Push the unique SHA tag to ECR
          docker push ${{ env.ECR_REPO }}:${{ github.sha }}
          
          # Push the "latest" tag to ECR
          docker push ${{ env.ECR_REPO }}:latest
  deploy-ecs:
    name: Deploy
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          role-session-name: ${{ env.ROLE_SESSION_NAME }}
          web-identity-token-file: ${{ github.token_path }}
      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment --region ${{ env.AWS_REGION }}
